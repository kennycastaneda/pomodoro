{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kenec\\\\Documents\\\\Thinkful\\\\pomodoro\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport ChangeDuration from \"./ChangeDuration\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport PlayPauseStop from \"./PlayPauseStop\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [isStopped, setIsStopped] = useState(true); //true if stopped and false if play or pause\n\n  const [timeLeft, setTimeLeft] = useState(0); //value of milliseconds remaining\n\n  const [timeSinceStart, setTimeSinceStart] = useState(0); //time since initial play is clicked, or enter new session\n\n  const [initial, setInitial] = useState(true); //value only gets changed once when play first clicked, and reset to true if stopped\n\n  const [widthPercentage, setWidthPercentage] = useState(0); //width percentage from 0 to 100\n  //durationMinutes function changes string to number to add minutes when changing durations\n\n  function durationMinutes(durationString) {\n    let minutes = durationString.slice(0, 2);\n    minutes = parseInt(minutes);\n    return minutes;\n  } //Set up focusDuration value to 25 minutes and set up function when buttons are clicked for changing focus duration\n\n\n  const [focusDuration, setFocusDuration] = useState(minutesToDuration(25)); //object with session name and duration\n\n  const [session, setSession] = useState({\n    name: \"Focusing\",\n    duration: focusDuration\n  });\n\n  const focusDurationChange = ({\n    target\n  }) => {\n    //switch setup for duration changes and limits on times\n    switch (true) {\n      case focusDuration === \"05:00\" && target.id === \"Minus\":\n        console.log(\"Cannot set focus time to zero\");\n        break;\n\n      case focusDuration === \"60:00\" && target.id === \"Plus\":\n        console.log(\"Cannot set focus time greater than 60\");\n        break;\n\n      case target.id === \"Plus\":\n        setFocusDuration(focusDuration => minutesToDuration(durationMinutes(focusDuration) + 5));\n        break;\n\n      case target.id === \"Minus\":\n        setFocusDuration(focusDuration => minutesToDuration(durationMinutes(focusDuration) - 5));\n        break;\n\n      default:\n        setFocusDuration(minutesToDuration(25));\n    }\n  }; //Set up brakDuration value to 5 minutes and set up function when buttons are clicked for changing break duration\n\n\n  const [breakDuration, setBreakDuration] = useState(minutesToDuration(5));\n\n  const breakDurationChange = ({\n    target\n  }) => {\n    //console.log(target.id);\n    switch (true) {\n      case breakDuration === \"01:00\" && target.id === \"Minus\":\n        console.log(\"Cannot set break time to zero\");\n        break;\n\n      case breakDuration === \"15:00\" && target.id === \"Plus\":\n        console.log(\"Cannot set break time greater than 15\");\n        break;\n\n      case target.id === \"Plus\":\n        console.log(durationMinutes(breakDuration));\n        setBreakDuration(breakDuration => minutesToDuration(durationMinutes(breakDuration) + 1));\n        break;\n\n      case target.id === \"Minus\":\n        setBreakDuration(breakDuration => minutesToDuration(durationMinutes(breakDuration) - 1));\n        break;\n\n      default:\n        setBreakDuration(minutesToDuration(5));\n    }\n  }; //function to initiate timer to focus time\n\n\n  function initiate(initial) {\n    if (initial) {\n      setTimeLeft(() => durationMinutes(focusDuration) * 60);\n      setInitial(() => false);\n      setSession({\n        name: \"Focusing\",\n        duration: focusDuration\n      });\n    }\n  }\n\n  function widthPercentageCalc(timeSinceStart, focusDuration) {\n    timeSinceStart * 100 / (durationMinutes(focusDuration) * 60);\n  }\n\n  useInterval(() => {\n    if (session.name === \"Focusing\") {\n      console.log(widthPercentage);\n      setTimeSinceStart(timeSinceStart => timeSinceStart + 1);\n      setTimeLeft(timeLeft - 1);\n      setWidthPercentage(widthPercentageCalc(timeSinceStart, focusDuration));\n\n      if (timeLeft <= 0) {\n        setTimeSinceStart(0);\n        setTimeLeft(() => durationMinutes(breakDuration) * 60);\n        setSession({\n          name: \"On Break\",\n          duration: breakDuration\n        });\n      }\n    }\n\n    if (session === \"On Break\") {\n      console.log(widthPercentage);\n      setTimeSinceStart(timeSinceStart => timeSinceStart + 1);\n      setTimeLeft(timeLeft - 1);\n      setWidthPercentage(timeSinceStart * 100 / (durationMinutes(breakDuration) * 60));\n\n      if (timeLeft <= 0) {\n        setTimeSinceStart(0);\n        setTimeLeft(() => durationMinutes(focusDuration) * 60);\n        setSession({\n          name: \"Focusing\",\n          duration: focusDuration\n        });\n      }\n    }\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    initiate(initial);\n    setIsTimerRunning(prevState => !prevState);\n    setIsStopped(false);\n  }\n\n  function stopped() {\n    setFocusDuration(minutesToDuration(25)); //default to 25 minute focus\n\n    setBreakDuration(minutesToDuration(5)); //default to 5 minute break\n\n    setIsTimerRunning(false); //timer is stopped\n\n    setIsStopped(prevState => !prevState); //should go to true\n\n    setInitial(prevState => !prevState); //should go to true\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group input-group-lg mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-group-text\",\n    \"data-testid\": \"duration-focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"Focus Duration: \", focusDuration), /*#__PURE__*/React.createElement(ChangeDuration, {\n    handleDurationChange: focusDurationChange,\n    timerRunning: isTimerRunning,\n    dataTestId: \"focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-group input-group-lg mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"input-group-text\",\n    \"data-testid\": \"duration-break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, \"Break Duration: \", breakDuration), /*#__PURE__*/React.createElement(ChangeDuration, {\n    handleDurationChange: breakDurationChange,\n    timerRunning: isTimerRunning,\n    dataTestId: \"break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(PlayPauseStop, {\n    isTimerRunning: isTimerRunning,\n    handlePlayPause: playPause,\n    handleStop: stopped,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    hidden: isStopped,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, session.name, \" for \", session.duration, \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, secondsToDuration(timeLeft), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": widthPercentage // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${widthPercentage}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/kenec/Documents/Thinkful/pomodoro/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","ChangeDuration","minutesToDuration","secondsToDuration","PlayPauseStop","Pomodoro","isTimerRunning","setIsTimerRunning","isStopped","setIsStopped","timeLeft","setTimeLeft","timeSinceStart","setTimeSinceStart","initial","setInitial","widthPercentage","setWidthPercentage","durationMinutes","durationString","minutes","slice","parseInt","focusDuration","setFocusDuration","session","setSession","name","duration","focusDurationChange","target","id","console","log","breakDuration","setBreakDuration","breakDurationChange","initiate","widthPercentageCalc","playPause","prevState","stopped","height","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport ChangeDuration from \"./ChangeDuration\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport PlayPauseStop from \"./PlayPauseStop\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [isStopped, setIsStopped] = useState(true); //true if stopped and false if play or pause\n  const [timeLeft, setTimeLeft] = useState(0); //value of milliseconds remaining\n  const [timeSinceStart, setTimeSinceStart] = useState(0); //time since initial play is clicked, or enter new session\n  const [initial, setInitial] = useState(true); //value only gets changed once when play first clicked, and reset to true if stopped\n  const [widthPercentage, setWidthPercentage] = useState(0); //width percentage from 0 to 100\n\n  //durationMinutes function changes string to number to add minutes when changing durations\n  function durationMinutes(durationString) {\n    let minutes = durationString.slice(0, 2);\n    minutes = parseInt(minutes);\n    return minutes;\n  }\n\n  //Set up focusDuration value to 25 minutes and set up function when buttons are clicked for changing focus duration\n  const [focusDuration, setFocusDuration] = useState(minutesToDuration(25));\n  //object with session name and duration\n  const [session, setSession] = useState({\n    name: \"Focusing\",\n    duration: focusDuration,\n  });\n\n  const focusDurationChange = ({ target }) => {\n    //switch setup for duration changes and limits on times\n    switch (true) {\n      case focusDuration === \"05:00\" && target.id === \"Minus\":\n        console.log(\"Cannot set focus time to zero\");\n        break;\n      case focusDuration === \"60:00\" && target.id === \"Plus\":\n        console.log(\"Cannot set focus time greater than 60\");\n        break;\n      case target.id === \"Plus\":\n        setFocusDuration((focusDuration) =>\n          minutesToDuration(durationMinutes(focusDuration) + 5)\n        );\n        break;\n      case target.id === \"Minus\":\n        setFocusDuration((focusDuration) =>\n          minutesToDuration(durationMinutes(focusDuration) - 5)\n        );\n        break;\n      default:\n        setFocusDuration(minutesToDuration(25));\n    }\n  };\n\n  //Set up brakDuration value to 5 minutes and set up function when buttons are clicked for changing break duration\n  const [breakDuration, setBreakDuration] = useState(minutesToDuration(5));\n  const breakDurationChange = ({ target }) => {\n    //console.log(target.id);\n    switch (true) {\n      case breakDuration === \"01:00\" && target.id === \"Minus\":\n        console.log(\"Cannot set break time to zero\");\n        break;\n      case breakDuration === \"15:00\" && target.id === \"Plus\":\n        console.log(\"Cannot set break time greater than 15\");\n        break;\n      case target.id === \"Plus\":\n        console.log(durationMinutes(breakDuration));\n        setBreakDuration((breakDuration) =>\n          minutesToDuration(durationMinutes(breakDuration) + 1)\n        );\n        break;\n      case target.id === \"Minus\":\n        setBreakDuration((breakDuration) =>\n          minutesToDuration(durationMinutes(breakDuration) - 1)\n        );\n        break;\n      default:\n        setBreakDuration(minutesToDuration(5));\n    }\n  };\n\n  //function to initiate timer to focus time\n  function initiate(initial) {\n    if (initial) {\n      setTimeLeft(() => durationMinutes(focusDuration) * 60);\n      setInitial(() => false);\n      setSession({\n        name: \"Focusing\",\n        duration: focusDuration,\n      });\n    }\n  }\n  function widthPercentageCalc(timeSinceStart, focusDuration) {\n    (timeSinceStart * 100) / (durationMinutes(focusDuration) * 60);\n  }\n  useInterval(\n    () => {\n      if (session.name === \"Focusing\") {\n        console.log(widthPercentage);\n        setTimeSinceStart((timeSinceStart) => timeSinceStart + 1);\n        setTimeLeft(timeLeft - 1);\n        setWidthPercentage(widthPercentageCalc(timeSinceStart, focusDuration));\n        if (timeLeft <= 0) {\n          setTimeSinceStart(0);\n          setTimeLeft(() => durationMinutes(breakDuration) * 60);\n          setSession({ name: \"On Break\", duration: breakDuration });\n        }\n      }\n      if (session === \"On Break\") {\n        console.log(widthPercentage);\n        setTimeSinceStart((timeSinceStart) => timeSinceStart + 1);\n        setTimeLeft(timeLeft - 1);\n        setWidthPercentage(\n          (timeSinceStart * 100) / (durationMinutes(breakDuration) * 60)\n        );\n        if (timeLeft <= 0) {\n          setTimeSinceStart(0);\n          setTimeLeft(() => durationMinutes(focusDuration) * 60);\n          setSession({ name: \"Focusing\", duration: focusDuration });\n        }\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    initiate(initial);\n    setIsTimerRunning((prevState) => !prevState);\n    setIsStopped(false);\n  }\n\n  function stopped() {\n    setFocusDuration(minutesToDuration(25)); //default to 25 minute focus\n    setBreakDuration(minutesToDuration(5)); //default to 5 minute break\n    setIsTimerRunning(false); //timer is stopped\n    setIsStopped((prevState) => !prevState); //should go to true\n    setInitial((prevState) => !prevState); //should go to true\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              {/* TODO: Update this text to display the current focus session duration */}\n              Focus Duration: {focusDuration}\n            </span>\n            <ChangeDuration\n              handleDurationChange={focusDurationChange}\n              timerRunning={isTimerRunning}\n              dataTestId=\"focus\"\n            />\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {breakDuration}\n              </span>\n              <ChangeDuration\n                handleDurationChange={breakDurationChange}\n                timerRunning={isTimerRunning}\n                dataTestId=\"break\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      <PlayPauseStop\n        isTimerRunning={isTimerRunning}\n        handlePlayPause={playPause}\n        handleStop={stopped}\n      />\n      <div hidden={isStopped}>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">\n              {session.name} for {session.duration} minutes\n            </h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {secondsToDuration(timeLeft)} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow={widthPercentage} // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${widthPercentage}%` }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}